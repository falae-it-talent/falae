name: CD

on:
  push:
    branches:
      - ci-test-01
  workflow_run:
    workflows: CI
    types:
      - completed 

jobs:
  CD:
    if: github.event.workflow_run.conclusion == 'success'
    runs-on: ubuntu-latest

    env:
      SSH_USER: ${{ secrets.SSH_USER }}
      SSH_KEY: ${{ secrets.SSH_KEY }}
      SSH_HOST: ${{ secrets.SSH_HOST }}
      DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
      DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
      DB_USER: ${{ secrets.DB_USER }}
      DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
      DB_NAME: ${{ secrets.DB_NAME }}

    steps:
      - name: Configure SSH AWS
        run: |
          mkdir -p ~/.ssh/
          echo "${{ secrets.SSH_KEY }}" > ~/.ssh/aws-cloud.key
          chmod 600 ~/.ssh/aws-cloud.key
          cat >>~/.ssh/config <<EOF
          Host aws-cloud
            HostName ${{ secrets.SSH_HOST }}
            User ${{ secrets.SSH_USER }}
            IdentityFile ~/.ssh/aws-cloud.key
            StrictHostKeyChecking no
          EOF

      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Build and Push Docker Images
        run: |
          docker build -t guilherme2041/falae-app:latest ./caminho/para/diretorio/do/app
          docker push guilherme2041/falae-app:latest
          
          docker build -t guilherme2041/falae-nginx:latest ./caminho/para/diretorio/do/proxy
          docker push guilherme2041/falae-nginx:latest

      - name: Pull latest Docker images
        run: |
          ssh aws-cloud 'sudo docker-compose -f /falae/docker-compose.yml pull'

      - name: Deploy Application
        run: |
          ssh aws-cloud 'sudo docker-compose -f /falae/docker-compose.yml up -d'

      - name: Restore Database
        run: |
          ssh aws-cloud "cd /falae"
          ssh aws-cloud "touch .env"
          ssh aws-cloud "cat /etc/.env > /home/github/falae/.env"
          ssh aws-cloud "./restoreDB.sh dump.sql"
    
      - name: Remove Unused Docker Images and Containers
        run: |
          ssh aws-cloud 'sudo docker image prune -f || true'
          ssh aws-cloud 'sudo docker container prune -f || true'

